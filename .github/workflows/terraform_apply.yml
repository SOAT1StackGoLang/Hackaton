name: Terraform Apply

on: 
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: false
      AWS_SESSION_TOKEN:
        description: 'AWS Session Token'
        required: false
      AWS_DEFAULT_REGION:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'
      DEPLOY_ENVIRONMENT:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - branch
          - dev
          - dev-01
          - main
      TF_STATE_BUCKET:
        description: 'Terraform State Bucket'
        required: false
        default: 's1sg-tc-terraform-state-bucket-hackaton'
        type: choice
        options:
          - s1sg-tc-terraform-state-bucket-hackaton
          - s1sg-tc-terraform-state-bucket-hackaton-dev
          - s1sg-tc-terraform-state-bucket-hackaton-dev-01
          - s1sg-tc-terraform-state-bucket-hackaton-main
          - default-with-account-id
      TF_STATE_KEY:
        description: 'Terraform State Key'
        required: false
        default: 'terraform.tfstate'
      svc_hackaton_image_tag:
        description: 'The tag of the image for the hackaton service without svc'
        required: false
        default: 'develop'
        type: choice
        options:
          - branch
          - develop
          - main
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN || secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ github.event.inputs.AWS_DEFAULT_REGION }}
    
    # Lets configure the environment variables, if the TF_STATE_BUCKET is s1sg-tc-terraform-state-bucket-hackaton we should append the AWS accoount ID in the end
    # s1sg-tc-terraform-state-bucket-hackaton-<AWS_ACCOUNT_ID>
    # if the svc_hackaton_image_tag is branch we should change to the real branch name
    # if the DEPLOY_ENVIRONMENT is branch we should change to the real branch name
    - name: Set Environment Variables
      run: |
        if [ "${{ github.event.inputs.TF_STATE_BUCKET }}" == "default-with-account-id" ]; then
          # get the AWS account ID
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          export TF_STATE_BUCKET="s1sg-tc-terraform-state-bucket-${AWS_ACCOUNT_ID}"
        else
          export TF_STATE_BUCKET="${{ github.event.inputs.TF_STATE_BUCKET }}"
        fi
        if [ "${{ github.event.inputs.svc_hackaton_image_tag }}" == "branch" ]; then
          export svc_hackaton_image_tag="${{ github.event.ref }}"
        else
          export svc_hackaton_image_tag="${{ github.event.inputs.svc_hackaton_image_tag }}"
        fi
        if [ "${{ github.event.inputs.DEPLOY_ENVIRONMENT }}" == "branch" ]; then
          export DEPLOY_ENVIRONMENT="${{ github.event.ref }}"
        else
          export DEPLOY_ENVIRONMENT="${{ github.event.inputs.DEPLOY_ENVIRONMENT }}"
        fi
        echo "TF_STATE_BUCKET=${TF_STATE_BUCKET}" >> $GITHUB_ENV
        echo "svc_hackaton_image_tag=${svc_hackaton_image_tag}" >> $GITHUB_ENV
        echo "DEPLOY_ENVIRONMENT=${DEPLOY_ENVIRONMENT}" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -upgrade -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=${{ github.event.inputs.TF_STATE_KEY }}" -backend-config="region=${{ github.event.inputs.AWS_DEFAULT_REGION }}"
      working-directory: './IaC'

    - name: Set redeploy annotation
      run: echo "TF_VAR_redeploy_annotation=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      working-directory: './IaC'

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: './IaC'
      env:
        TF_VAR_environment: ${{ github.event.inputs.DEPLOY_ENVIRONMENT }}
        TF_VAR_image_registry: "ghcr.io/soat1stackgolang"
        TF_VAR_svc_hackaton_image_tag: "${{ env.svc_hackaton_image_tag }}"
